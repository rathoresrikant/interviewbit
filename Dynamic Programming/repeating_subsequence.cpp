/*
Repeating Sub-Sequence
Given a string A, find if there is any subsequence that repeats itself. A subsequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters. NOTE : sub-sequence length should be greater than or equal to 2.
 Input Format:
The first and the only argument of input contains a string A.
Output Format:
Return an integer, 0 or 1:
    => 0 : False
    => 1 : True
Constraints:
1 <= length(A) <= 100
Examples:
Input 1:
    A = "abab"

Output 1:
    1

Explanation 1:
    "ab" is repeated.

Input 2:
    A = "abba"

Output 2:
    0

Explanation 2:
    There is no repeating subsequence.
*/
int LCS(string A, string B)
{
    int n = A.length(), m = B.length();
    vector <vector <int> > dp((n+1), vector <int> (m+1));
    for(int i=1; i<=n; i++)
    {
        for(int j=0; j<=n; j++)
        {
            if(A[i-1] == B[j-1] && i != j)
            {
                dp[i][j] = dp[i-1][j-1] + 1;
            }
            else
            {
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
    }
    if(dp[n][m] >= 2)
        return 1;
    else
        return 0;
}
int Solution::anytwo(string A)
{
    return LCS(A, A);
}
